<launch>

  <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
  <!-- file mo ta udrf -->
  <include file="$(find urdf_tutorial)/launch/display.launch" />
  <node pkg="tf" type="static_transform_publisher" name="base_footprint_to_laser" args="0.6 0.4 0.2 0.785 0 0 base_footprint laser 30" />
  <node pkg="tf" type="static_transform_publisher" name="base_footprint_to_laser1" args="-0.6 -0.4 0.2 -2.356 0 0 base_footprint laser1 30" />

  
  
  <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
  <!-- map to odom will be provided by the AMCL -->
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />


  <!-- chuong trinh xu ly toc do dong co -->
  <!-- Subscribe: /cmd_vel -->
  <node name="amr_setvelocity" pkg="robot_amr" type="amr_setvelocity.py"  output = "screen"  >
  </node>
  
  
   <!-- chuong trinh nhan yeu cau tu server cac tram goal -->
    <!-- Subscribe: /nut_nhan, cac yeu cau tu server -->
  <!-- Publish: /odom_data_euler, /odom_data_quat -->
 
  
  
   <!-- chuong trinh xu ly tinh toan vi tri robot -->
    <!-- Subscribe: /initial_2d, /goal_2d -->
  <!-- Publish: /odom_data_euler, /odom_data_quat -->
  <node name="amr_ekf_odom_pub" pkg="robot_amr" type="amr_ekf_odom_pub.py"   >
  </node>



  
    <!-- SICK NAV350 -->
  <include file="$(find sicktoolbox_wrapper)/launch/sicknav350.launch" />
	
  <!-- Extended Kalman Filter from robot_pose_ekf Node-->
  <!-- Subscribe: /odom, /imu_data, /vo -->
  <!-- Publish: /robot_pose_ekf/odom_combined -->
  <remap from="odom" to="odom_data_quat" />
  <remap from="imu_data" to="imu/data" />
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom"/>
    <param name="base_footprint_frame" value="base_footprint"/>
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="false"/>
    <param name="gps_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
  </node>
	
	
  <!-- Initial Pose and Goal Publisher -->
  <!-- Publish: /initialpose, /move_base_simple/goal -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d /home/user1/catkin_ws/src/amr/robot_amr/maps/nhamay_teb.rviz">
  </node> 


    <!-- Subscribe: /initialpose, /move_base_simple/goal -->
  <!-- Publish: /initial_2d, /goal_2d --> 
  <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
  </node> 

 

 <!-- Map File -->
  <arg name="map_file" default="$(find robot_amr)/maps/nmk_layout.yaml"/>
	
	
  
	
  <!-- Add AMCL example for differential drive robots for Localization -->
  <!-- Subscribe: /scan, /tf, /initialpose, /map -->
  <!-- Publish: /amcl_pose, /particlecloud, /tf -->
  <include file="$(find amcl)/examples/amcl_diff.launch"/>
	
	
 <!-- Map Server -->
  <!-- Publish: /map, /map_metadata -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />
  

  
    <!-- IMU Data Publisher Using the BNO055 IMU Sensor -->
  <!-- Publish: /imu/data -->
     <include file="$(find realsense2_camera)/launch/rs_camera.launch" />
  
  
   <!-- Move Base Node -->
  <!-- Subscribe: /move_base_simple/goal -->
  <!-- Publish: /cmd_vel -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
  	<rosparam file="$(find teb_local_planner_tutorials)/cfg/diff_drive/costmap_common_params.yaml" command="load" ns="global_costmap" />
 	<rosparam file="$(find teb_local_planner_tutorials)/cfg/diff_drive/costmap_common_params.yaml" command="load" ns="local_costmap" />
	<rosparam file="$(find teb_local_planner_tutorials)/cfg/diff_drive/local_costmap_params.yaml" command="load"  />
	<rosparam file="$(find teb_local_planner_tutorials)/cfg/diff_drive/global_costmap_params.yaml" command="load"  />
	<rosparam file="$(find teb_local_planner_tutorials)/cfg/diff_drive/teb_local_planner_params.yaml" command="load" />

	<param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS" />
	<param name="controller_frequency" value="5.0" />
	<param name="controller_patience" value="15.0" />
 </node>

  
  
   <!-- chay server websocket --> 
  <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" />
  
  <!-- chay rplidar --> 
  <include file="$(find rplidar_ros)/launch/rplidar_a1.launch" />
  

  
  

</launch>
