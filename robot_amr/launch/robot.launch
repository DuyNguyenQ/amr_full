<launch>

  <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser1" args="0.58 0.36 0 0.785 0 3.14 base_link scan1 30" />
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser2" args="-0.58 -0.36 0 -2.355 0 3.14 base_link scan2 30" />
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0 0 0 0 0 0 base_link laser 30" />
  <node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0.6 0 -0.09 0 0 0 base_link imu 30" />
  <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.2 0 0 0 base_footprint base_link 30" />
  <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
  <!-- map to odom will be provided by the AMCL -->
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />
  <node pkg="tf" type="static_transform_publisher" name="odom_to_basefootprint" args="0 0 0 0 0 0 odom base_footprint 30" />
  

  <!-- Wheel Encoder Tick Publisher and Base Controller Using Arduino -->  
  <!-- motor_controller_diff_drive_2.ino is the Arduino sketch -->
  <!-- Subscribe: /cmd_vel -->
  <!-- Publish: /right_ticks, /left_ticks -->
  <!-- Wheel Odometry Publisher -->
  <!-- Subscribe: /right_ticks, /left_ticks, /initial_2d -->
  <!-- Publish: /odom_data_euler, /odom_data_quat -->
  <node name="amr_ekf_odom_pub" pkg="robot_amr" type="amr_ekf_odom_pub.py" output="screen"  >
  </node>
	
	
	
	
  <!-- IMU Data Publisher Using the BNO055 IMU Sensor -->
  <!-- Publish: /imu/data -->
  <include file="$(find realsense2_camera)/launch/rs_camera.launch" />
  
  <node name="ekf_localization" pkg="robot_localization" type="ekf_localization_node" >
      <!-- <remap from = "odometry/filtered" to = "odom"> -->
      <rosparam command = "load" file = "$(find robot_localization)/params/ekf_localization.yaml"/>
  </node>


	
  <!-- Extended Kalman Filter from robot_pose_ekf Node-->
  <!-- Subscribe: /odom, /imu_data, /vo -->
  <!-- Publish: /robot_pose_ekf/odom_combined -->
  <!-- <remap from="odom" to="odom_data_quat" />
  <remap from="imu_data" to="imu/data" />
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom"/>
    <param name="base_footprint_frame" value="base_footprint"/>
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="false"/>
    <param name="gps_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
  </node> -->
	
	
  <!-- Initial Pose and Goal Publisher -->
  <!-- Publish: /initialpose, /move_base_simple/goal -->
   <node pkg="rviz" type="rviz" name="rviz" args="-d /home/user1/catkin_ws/s_rc/amr/robot_amr/maps/nhamay_teb.rviz">
  </node> 



  <!-- Subscribe: /initialpose, /move_base_simple/goal -->
  <!-- Publish: /initial_2d, /goal_2d --> 
  <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
  </node>   


  <!-- Lidar Data Publisher Using RPLIDAR from Slamtec -->
  <!-- Used for obstacle avoidance and can be used for mapping --> 
  <!-- Publish: /scan -->
  
  <include file="$(find sick_safetyscanners)/launch/sick_safetyscanners2.launch" />

  <include file="$(find sick_safetyscanners)/launch/sick_safetyscanners1.launch" />
  <include file="$(find ira_laser_tools)/launch/laserscan_multi_merger.launch" />




  <!-- Map File -->
  <arg name="map_file" default="$(find robot_amr)/maps/quet.yaml"/>
	
	
	
  <!-- Map Server -->
  <!-- Publish: /map, /map_metadata -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />
	
	
	
  <!-- Add AMCL example for differential drive robots for Localization -->
  <!-- Subscribe: /scan, /tf, /initialpose, /map -->
  <!-- Publish: /amcl_pose, /particlecloud, /tf -->
  <!-- <include file="$(find amcl)/examples/chinhamcl.launch"/> -->
	
	
	
  <!-- Move Base Node -->
  <!-- Subscribe: /move_base_simple/goal -->
  <!-- Publish: /cmd_vel -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
  <rosparam file="$(find teb_local_planner_tutorials)/cfg/diff_drive/costmap_common_params.yaml" command="load" ns="global_costmap" />
 	<rosparam file="$(find teb_local_planner_tutorials)/cfg/diff_drive/costmap_common_params.yaml" command="load" ns="local_costmap" />
	<rosparam file="$(find teb_local_planner_tutorials)/cfg/diff_drive/local_costmap_params.yaml" command="load"  />
	<rosparam file="$(find teb_local_planner_tutorials)/cfg/diff_drive/global_costmap_params.yaml" command="load"  />
	<rosparam file="$(find teb_local_planner_tutorials)/cfg/diff_drive/teb_local_planner_params.yaml" command="load" />

	<param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS" />
	<param name="controller_frequency" value="10.0" />
	<param name="controller_patience" value="15.0" />
 </node>
  

 
  


</launch>
